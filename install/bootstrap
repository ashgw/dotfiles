#!/bin/bash

REPO=https://raw.githubusercontent.com/AshGw/dotfiles/main
GREEN="\e[1;32m"
RED="\e[31m"
CYAN="\e[36m"
ENDCOLOR="\e[0m"

# zsh needs to be installed natively, or else it brings trouble in some environments as
# $HOM/.nix-profile/bin/zsh is not recognized as a valid shell
if ! command -v zsh &> /dev/null; then
  if [ -f "/etc/debian_version" ]; then
    echo "Zsh not found. Installing zsh on Debian..."
    sudo apt update
    sudo apt -y install zsh
  else
    echo -e "${RED}Zsh not found, and you are not on Debian. Install it with your package manager to continue. Exiting. ${ENDCOLOR}"
    exit 1
  fi
fi

# Nixsetp
GREEN="\e[1;32m"; CYAN="\e[36m"; RED="\e[31m"; END="\e[0m"
say(){ printf "%b%s%b\n" "$CYAN" "$*" "$END"; }
ok(){  printf "%b%s%b\n" "$GREEN" "$*" "$END"; }
err(){ printf "%b%s%b\n" "$RED" "$*" "$END" >&2; }

need_debian_pkg(){
  local pkg="$1"
  if ! dpkg -s "$pkg" >/dev/null 2>&1; then
    sudo apt-get update -y
    sudo apt-get install -y "$pkg"
  fi
}

have(){ command -v "$1" >/dev/null 2>&1; }

ensure_nix(){
  if have nix; then
    ok "Nix already installed"
  else
    if [[ -f /etc/debian_version ]]; then
      say "Installing prereqs for Nix"
      need_debian_pkg xz-utils
      need_debian_pkg ca-certificates
      need_debian_pkg curl
      need_debian_pkg build-essential
    fi
    say "Installing Nix (single user)"
    sh <(curl -L https://nixos.org/nix/install) --no-daemon
  fi

  if [[ -f "$HOME/.nix-profile/etc/profile.d/nix.sh" ]]; then
    # shellcheck disable=SC1091
    . "$HOME/.nix-profile/etc/profile.d/nix.sh"
  fi

  mkdir -p "$HOME/.config/nix"
  if ! grep -q 'experimental-features' "$HOME/.config/nix/nix.conf" 2>/dev/null; then
    echo 'experimental-features = nix-command flakes' >> "$HOME/.config/nix/nix.conf"
  fi
  export NIXPKGS_ALLOW_UNFREE=1
}

ensure_pkg(){
  local cmd="$1" nixAttr="$2"
  if have "$cmd"; then
    ok "$cmd present ($(command -v "$cmd"))"
  else
    say "Installing $cmd from Nix ($nixAttr)"
    nix profile install "nixpkgs#$nixAttr"
  fi
}

ensure_nix

say "Installing Nix packages..."
ensure_pkg git git
ensure_pkg curl curl
ensure_pkg eza eza
ensure_pkg wget wget
ensure_pkg nvim neovim
ensure_pkg tmux tmux
ensure_pkg bat bat
ensure_pkg python3 python3
ensure_pkg ssh openssh
ensure_pkg neofetch neofetch
ensure_pkg tree tree
ensure_pkg htop htop
ensure_pkg fd fd
ensure_pkg xclip xclip
ensure_pkg polybar polybar
ensure_pkg feh feh
ensure_pkg man man
ensure_pkg bruno bruno
ensure_pkg i3 i3
ensure_pkg picom picom
ensure_pkg pango-querymodules pango
ensure_pkg rg ripgrep
ensure_pkg direnv direnv
ensure_pkg librewolf librewolf
ensure_pkg chromium chromium
ensure_pkg virtualbox virtualbox
ensure_pkg wireshark wireshark
ensure_pkg nmap nmap
ensure_pkg fzf fzf
ensure_pkg pandoc pandoc
ensure_pkg zathura zathura
ensure_pkg starship starship
ensure_pkg tor tor
ensure_pkg tor-browser tor-browser-bundle-bin
ensure_pkg btop btop

ok "Nix package installation complete"

mkdir work trash personal

# tmux plugin manager
git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm


# dircolors
curl https://raw.githubusercontent.com/seebi/dircolors-solarized/master/dircolors.ansi-dark --output ~/.dircolors



# zsh setup

sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)" <<< $'\n'
rm -rf ~/.zshrc

mkdir ~/.config ~/.ssh ~/.config/nvim ~/.config/zathura ~/.config/neofetch ~/.config/picom ~/.config/polybar ~/.config/i3

# dotfiles mapping
echo -e "${CYAN}Copying the files into $HOME..${ENDCOLOR}"

declare -A dotfiles=(
  [".zshrc"]="$REPO/.zshrc"
  [".dircolors"]="$REPO/.dircolors"
  [".bashrc"]="$REPO/.bashrc"
  [".nanorc"]="$REPO/.nanorc"
  [".tmux.conf"]="$REPO/.tmux.conf"
  [".gitconfig"]="$REPO/.gitconfig"
  [".hushlogin"]="$REPO/.hushlogin"
  [".config/starship.toml"]="$REPO/.config/starship.toml"
  [".config/nvim/init.vim"]="$REPO/.config/nvim/init.vim"
  [".config/zathura/zathurarc"]="$REPO/.config/zathura/zathurarc"
  [".config/i3/config"]="$REPO/.config/i3/config"
  [".config/polybar/colors.ini"]="$REPO/.config/polybar/colors.ini"
  [".config/polybar/config.ini"]="$REPO/.config/polybar/config.ini"
  [".config/polybar/launch.sh"]="$REPO/.config/polybar/launch.sh"
  [".config/polybar/uptime.sh"]="$REPO/.config/polybar/uptime.sh"
  [".config/neofetch/config.conf"]="$REPO/.config/neofetch/config.conf"
  [".config/picom/picom.conf"]="$REPO/.config/picom/picom.conf"
  [".ssh/_gh_gen.sh"]="$REPO/.ssh/_gh_gen.sh"
  [".ssh/config"]="$REPO/.ssh/config"

)

for file in "${!dotfiles[@]}"; do
  curl -o "$HOME/$file" "${dotfiles[$file]}"
done

#### zsh final confs
echo '#Nix' >> ~/.zshrc
 cat << 'EOF' >> ~/.zshrc
if [ -e "$HOME/.nix-profile/etc/profile.d/nix.sh" ]; then
    . "$HOME/.nix-profile/etc/profile.d/nix.sh"
fi
EOF

      ### zsh plugins ###
git clone https://github.com/zsh-users/zsh-autosuggestions.git $HOME/.oh-my-zsh/custom/plugins/zsh-autosuggestions
git clone https://github.com/zsh-users/zsh-syntax-highlighting.git $HOME/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting

# starship
echo 'eval "$(starship init zsh)"' >> ~/.zshrc
starship preset nerd-font-symbols -o ~/.config/starship.toml


##############################################
#### now for the extra shit

read -p "Do you want to install all the arbitrary dev packages? (y/n): " ans

if [ "$ans" == "y" ]; then

    echo -e "\e[1;32mInstalling conda...\e[0m"
    bash <(curl -L $REPO/install/arbitrary/conda)
    echo -e "${GREEN}Conda installation: Done!.${ENDCOLOR}"

    echo -e "\e[1;32mInstalling node...\e[0m"
    bash <(curl -L $REPO/install/arbitrary/node)
    echo -e "${GREEN}Node installation done!.${ENDCOLOR}"


    echo -e "\e[1;32mInstalling bun...\e[0m"
    bash <(curl -L $REPO/install/arbitrary/bun)
    echo -e "${GREEN}Bun installation done!.${ENDCOLOR}"

    echo -e "\e[1;32mInstalling pnpm...\e[0m"
    bash <(curl -L $REPO/install/arbitrary/pnpm)
    echo -e "${GREEN}Pnpm installation done!.${ENDCOLOR}"

    echo -e "\e[1;32mInstalling poetry...\e[0m"
    bash <(curl -L $REPO/install/arbitrary/poetry)
    echo -e "${GREEN}Poetry installation done!${ENDCOLOR}"

    echo -e "\e[1;32mInstalling go...\e[0m"
    bash <(curl -L $REPO/install/arbitrary/go)
    echo -e "${GREEN}Go installation done!${ENDCOLOR}"

    echo -e "\e[1;32mInstalling terraform...\e[0m"
    bash <(curl -L $REPO/install/arbitrary/terraform)
    echo -e "${GREEN}terraform installation done!${ENDCOLOR}"



    echo -e "\e[1;32mInstalling rust...\e[0m"
    bash <(curl -L $REPO/install/arbitrary/rust)
    echo -e "${GREEN}Rust installation done!${ENDCOLOR}"
    echo -e "${CYAN}Installation of arbitrary packages is completed.${ENDCOLOR}"


else
    echo "Skipping installation of arbitrary dev packages."
fi

#############

read -p $"Do you by any chance want to install some proprietary software? (y/n)\nThe list currently contains: Obsidian: " ans

if [ "$ans" == "y" ]; then
    echo -e "${GREEN}Installing Obsidian${ENDCOLOR}"
    bash <(curl -L $REPO/install/proprietary/obsidian)
    echo -e "${GREEN}Obsidian is installed!${ENDCOLOR}"
else
    echo "Skipping the proprietary software installation."
fi

read -p $"Want to to set up GitHub SSH keys now? (y/n): " ans

if [ "$ans" == "y" ]; then
    bash <(curl -L $REPO/.ssh/_gh_gen.sh)
    echo -e "${GREEN}Done! The public key has been copied to your clipboard${ENDCOLOR}"

else
    echo "Aight, maybe later. You can run `ghkey` whenever youre ready to set it up."
fi


echo -e "${GREEN}Bootstrapped!${ENDCOLOR}"
echo -e "${CYAN}You might restart your shell for changes to take place${ENDCOLOR}"
