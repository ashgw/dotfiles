#!/bin/bash
#
# Minimal Hyprland installer for Debian Trixie/Sid
#

set -e

# Colors for better readability
OK="$(tput setaf 2)✓$(tput sgr0)"
ERROR="$(tput setaf 1)✗$(tput sgr0)"
NOTE="$(tput setaf 3)!$(tput sgr0)"
INFO="$(tput setaf 4)i$(tput sgr0)"

# Check if running as root
if [[ $EUID -eq 0 ]]; then
    echo "${ERROR} Don't run this script as root! It will use sudo when needed."
    exit 1
fi

# Check if we're on Debian
if ! grep -q 'ID=debian' /etc/os-release; then
    echo "${ERROR} This script is designed for Debian. Exiting."
    exit 1
fi

# Check Debian version
. /etc/os-release
if [[ "$VERSION_CODENAME" != "trixie" && "$VERSION_CODENAME" != "sid" && "$VERSION_CODENAME" != "unstable" ]]; then
    echo "${NOTE} This script is primarily designed for Debian Trixie/Sid."
    echo "      Current detected version: $PRETTY_NAME"
    read -p "Continue anyway? [y/N] " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Exiting."
        exit 1
    fi
fi

# Create logs directory
mkdir -p Install-Logs
LOG="Install-Logs/hyprland-install-$(date +%Y%m%d-%H%M%S).log"

# Helper functions
is_installed() {
    dpkg -l | grep -q "^ii  $1 "
}

install_package() {
    if is_installed "$1"; then
        echo "${OK} $1 is already installed"
    else
        echo "${INFO} Installing $1..."
        sudo apt install -y "$1" >> "$LOG" 2>&1 || {
            echo "${ERROR} Failed to install $1"
            return 1
        }
        echo "${OK} $1 installed"
    fi
}

# Essential packages for building Hyprland
DEPENDENCIES=(
    build-essential
    cmake
    cmake-extras
    curl
    git
    libcairo2-dev
    libdisplay-info-dev
    libdrm-dev
    libegl-dev
    libegl1-mesa-dev
    libgbm-dev
    libgles2-mesa-dev
    libglvnd-dev
    libinput-dev
    libliftoff-dev
    libpango1.0-dev
    libpixman-1-dev
    libseat-dev
    libsystemd-dev
    libtomlplusplus-dev
    libvulkan-dev
    libwayland-dev
    libxcb-composite0-dev
    libxcb-cursor-dev
    libxcb-dri3-dev
    libxcb-ewmh-dev
    libxcb-icccm4-dev
    libxcb-present-dev
    libxcb-render-util0-dev
    libxcb-xfixes0-dev
    libxcb-xinput-dev
    libxkbcommon-dev
    libxkbcommon-x11-dev
    meson
    ninja-build
    seatd
    xwayland
)

# Runtime dependencies for Hyprland
RUNTIME_DEPS=(
    grim
    kitty
    pipewire
    polkit-kde-agent-1
    slurp
    wl-clipboard
    xdg-desktop-portal
    xdg-desktop-portal-gtk
    wireplumber
)

# Additional essential tools
ESSENTIAL_TOOLS=(
    brightnessctl
    pavucontrol
    playerctl
    waybar
    wlogout
    xdg-user-dirs
)

# Set clean installation or selective
echo "${INFO} How would you like to install Hyprland?"
echo "1) Minimal (only Hyprland and essential dependencies)"
echo "2) Standard (Hyprland + useful tools)"
read -p "Your choice [1-2]: " INSTALL_TYPE
echo

# Update system
echo "${INFO} Updating package lists..."
sudo apt update >> "$LOG" 2>&1

# Install base dependencies
echo "${INFO} Installing build dependencies..."
for pkg in "${DEPENDENCIES[@]}"; do
    install_package "$pkg"
done

# Install runtime dependencies
echo "${INFO} Installing runtime dependencies..."
for pkg in "${RUNTIME_DEPS[@]}"; do
    install_package "$pkg"
done

# Install essential tools if standard installation is selected
if [[ "$INSTALL_TYPE" == "2" ]]; then
    echo "${INFO} Installing essential tools..."
    for pkg in "${ESSENTIAL_TOOLS[@]}"; do
        install_package "$pkg"
    done
fi

# Check if nvidia GPU is present
if lspci | grep -i nvidia > /dev/null; then
    echo "${INFO} NVIDIA GPU detected."
    read -p "Would you like to configure NVIDIA support? [y/N] " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "${INFO} Installing NVIDIA support..."
        install_package "nvidia-driver"
        install_package "libnvidia-egl-wayland1"

        # Configure NVIDIA settings
        echo 'options nvidia-drm modeset=1' | sudo tee /etc/modprobe.d/nvidia.conf >> "$LOG" 2>&1
        echo 'options nvidia NVreg_PreserveVideoMemoryAllocations=1' | sudo tee -a /etc/modprobe.d/nvidia.conf >> "$LOG" 2>&1

        # Update GRUB command line
        if grep -q "GRUB_CMDLINE_LINUX=" /etc/default/grub; then
            sudo sed -i 's/GRUB_CMDLINE_LINUX="/GRUB_CMDLINE_LINUX="rd.driver.blacklist=nouveau modprobe.blacklist=nouveau nvidia-drm.modeset=1 rcutree.rcu_idle_gp_delay=1 /' /etc/default/grub
            sudo update-grub >> "$LOG" 2>&1
        fi

        echo "${OK} NVIDIA configuration completed"
    fi
fi

# Clone and build Hyprland
if command -v Hyprland &>/dev/null || command -v hyprland &>/dev/null; then
    echo "${INFO} Hyprland appears to be already installed."
    read -p "Would you like to reinstall it? [y/N] " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "${OK} Keeping existing Hyprland installation."
    else
        REINSTALL_HYPRLAND=true
    fi
else
    REINSTALL_HYPRLAND=true
fi

if [[ "$REINSTALL_HYPRLAND" == "true" ]]; then
    # Specific Hyprland version
    HYPRLAND_VERSION="v0.49.0" # Adjust as needed

    echo "${INFO} Downloading and building Hyprland ${HYPRLAND_VERSION}..."

    # Clean any existing directory
    rm -rf Hyprland 2>/dev/null || true

    # Clone Hyprland repository with the specified tag
    if ! git clone --recursive -b $HYPRLAND_VERSION https://github.com/hyprwm/Hyprland; then
        echo "${ERROR} Failed to clone Hyprland repository."
        exit 1
    fi

    cd Hyprland

    echo "${INFO} Building Hyprland..."
    if make all >> "../$LOG" 2>&1; then
        echo "${INFO} Installing Hyprland..."
        if sudo make install >> "../$LOG" 2>&1; then
            echo "${OK} Hyprland installed successfully."
        else
            echo "${ERROR} Failed to install Hyprland."
            exit 1
        fi
    else
        echo "${ERROR} Failed to build Hyprland."
        exit 1
    fi

    cd ..
fi

# Setup seatd service
if systemctl list-unit-files | grep -q seatd.service; then
    echo "${INFO} Enabling seatd service..."
    sudo systemctl enable --now seatd.service >> "$LOG" 2>&1

    # Add user to seat and input groups if needed
    for grp in seat input; do
        if getent group "$grp" >/dev/null && ! groups "$(whoami)" | grep -q "\b$grp\b"; then
            echo "${INFO} Adding user to $grp group..."
            sudo usermod -aG "$grp" "$(whoami)" >> "$LOG" 2>&1
        fi
    done
fi

# Setup xdg user directories
if command -v xdg-user-dirs-update &>/dev/null; then
    echo "${INFO} Updating XDG user directories..."
    xdg-user-dirs-update >> "$LOG" 2>&1
fi

# Optionally create a minimal configuration file
read -p "Would you like to create a minimal Hyprland config? [Y/n] " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Nn]$ ]]; then
    mkdir -p ~/.config/hypr
    CONFIG_PATH=~/.config/hypr/hyprland.conf

    # Backup existing config if it exists
    if [ -f "$CONFIG_PATH" ]; then
        mv "$CONFIG_PATH" "$CONFIG_PATH.backup.$(date +%Y%m%d%H%M%S)"
    fi

    # Create minimal config
    cat > "$CONFIG_PATH" << EOF
# See https://wiki.hyprland.org/Configuring/Monitors/
monitor=,preferred,auto,auto

# Execute apps at launch
exec-once = waybar
exec-once = /usr/lib/polkit-kde-authentication-agent-1

# Set cursor size
env = XCURSOR_SIZE,24

# For all categories, see https://wiki.hyprland.org/Configuring/Variables/
input {
    kb_layout = us
    follow_mouse = 1
    touchpad {
        natural_scroll = false
    }
    sensitivity = 0 # -1.0 - 1.0, 0 means no modification.
}

general {
    gaps_in = 5
    gaps_out = 10
    border_size = 2
    col.active_border = rgba(33ccffee)
    col.inactive_border = rgba(595959aa)
    layout = dwindle
}

decoration {
    rounding = 5
    blur {
        enabled = true
        size = 3
        passes = 1
    }
    drop_shadow = true
    shadow_range = 4
    shadow_render_power = 3
}

animations {
    enabled = true
    bezier = myBezier, 0.05, 0.9, 0.1, 1.05
    animation = windows, 1, 7, myBezier
    animation = windowsOut, 1, 7, default, popin 80%
    animation = border, 1, 10, default
    animation = fade, 1, 7, default
    animation = workspaces, 1, 6, default
}

dwindle {
    pseudotile = true
    preserve_split = true
}

master {
    new_is_master = true
}

gestures {
    workspace_swipe = false
}

# Example windowrule v1
# windowrule = float, ^(kitty)$
# Example windowrule v2
# windowrulev2 = float,class:^(kitty)$,title:^(kitty)$

# Basic keybindings
$mainMod = SUPER

bind = $mainMod, Return, exec, kitty
bind = $mainMod, Q, killactive
bind = $mainMod, M, exit
bind = $mainMod, E, exec, thunar
bind = $mainMod, V, togglefloating
bind = $mainMod, SPACE, exec, wofi --show drun
bind = $mainMod, P, pseudo
bind = $mainMod, J, togglesplit

# Move focus with mainMod + arrow keys
bind = $mainMod, left, movefocus, l
bind = $mainMod, right, movefocus, r
bind = $mainMod, up, movefocus, u
bind = $mainMod, down, movefocus, d

# Switch workspaces with mainMod + [0-9]
bind = $mainMod, 1, workspace, 1
bind = $mainMod, 2, workspace, 2
bind = $mainMod, 3, workspace, 3
bind = $mainMod, 4, workspace, 4
bind = $mainMod, 5, workspace, 5
bind = $mainMod, 6, workspace, 6
bind = $mainMod, 7, workspace, 7
bind = $mainMod, 8, workspace, 8
bind = $mainMod, 9, workspace, 9
bind = $mainMod, 0, workspace, 10

# Move active window to a workspace with mainMod + SHIFT + [0-9]
bind = $mainMod SHIFT, 1, movetoworkspace, 1
bind = $mainMod SHIFT, 2, movetoworkspace, 2
bind = $mainMod SHIFT, 3, movetoworkspace, 3
bind = $mainMod SHIFT, 4, movetoworkspace, 4
bind = $mainMod SHIFT, 5, movetoworkspace, 5
bind = $mainMod SHIFT, 6, movetoworkspace, 6
bind = $mainMod SHIFT, 7, movetoworkspace, 7
bind = $mainMod SHIFT, 8, movetoworkspace, 8
bind = $mainMod SHIFT, 9, movetoworkspace, 9
bind = $mainMod SHIFT, 0, movetoworkspace, 10

# Scroll through existing workspaces with mainMod + scroll
bind = $mainMod, mouse_down, workspace, e+1
bind = $mainMod, mouse_up, workspace, e-1

# Move/resize windows with mainMod + LMB/RMB and dragging
bindm = $mainMod, mouse:272, movewindow
bindm = $mainMod, mouse:273, resizewindow
EOF
    echo "${OK} Created minimal configuration at $CONFIG_PATH"
fi

echo
echo "${OK} Installation complete!"
echo
echo "To start Hyprland:"
echo "  1. Log out of your current session"
echo "  2. Switch to a TTY (Ctrl+Alt+F3)"
echo "  3. Log in and type: Hyprland"
echo
echo "Note: You may need to log out and back in for group changes to take effect."

read -p "Would you like to reboot now? [y/N] " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "Rebooting..."
    sudo reboot
fi

