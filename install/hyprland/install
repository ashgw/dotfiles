#!/usr/bin/env bash
# Hyprland full source install for Debian 13 (Trixie)
# Single file. Idempotent. Validates tags. No dotfiles/themes.

set -Eeuo pipefail
GREEN="$(tput setaf 2)"; CYAN="$(tput setaf 6)"; RED="$(tput setaf 1)"; YEL="$(tput setaf 3)"; END="$(tput sgr0)"
say(){  printf "%b%s%b\n" "$CYAN" "$*" "$END"; }
ok(){   printf "%b%s%b\n" "$GREEN" "$*" "$END"; }
warn(){ printf "%b%s%b\n" "$YEL" "$*" "$END"; }
err(){  printf "%b%s%b\n" "$RED" "$*" "$END" >&2; }
trap 'err "failed at line $LINENO: $BASH_COMMAND"' ERR
nproc_safe(){ nproc 2>/dev/null || getconf NPROCESSORS_CONF 2>/dev/null || echo 2; }

# --- config (override by exporting before run) ---
: "${WORKDIR:=$HOME/.cache/hypr-builds}"
: "${STAMPDIR:=/usr/local/share/hypr-setup/stamps}"
: "${INSTALL_SEATD:=1}"
: "${ENABLE_SDDM:=0}"
: "${REMOVE_CONFLICTS:=0}"

# tag prefs (fallback to latest if missing upstream)
: "${HYPRUTILS_TAG:=v0.8.1}"
: "${HYPRLANG_TAG:=v0.6.3}"
: "${HYPRGRAPHICS_TAG:=v0.1.5}"
: "${HYPRCURSOR_TAG:=v0.1.12}"
: "${HYPRSCAN_TAG:=v0.4.5}"                # hyprwayland-scanner (CMake)
: "${HYPRPROTO_TAG:=v0.6.4}"               # hyprland-protocols (Meson)
: "${AQUA_TAG:=v0.9.2}"                    # aquamarine
: "${HYPRIDLE_TAG:=v0.1.6}"
: "${HYPRAUTH_TAG:=v0.1.2}"                # hyprpolkitagent
: "${HYPRQTUTILS_TAG:=v0.1.4}"
: "${HYPRQT_SUPPORT_TAG:=v0.1.0}"
: "${HYPR_TAG:=v0.49.0}"
: "${XDPH_TAG:=v1.3.9}"                    # xdg-desktop-portal-hyprland

# --- apt deps (minimal but sufficient) ---
APT_PKGS=(
  build-essential cmake meson ninja-build pkg-config git curl jq ca-certificates
  python3-mako python3-markdown python3-markupsafe python3-pyquery python3-yaml
  scdoc unzip findutils gawk gettext
  wayland-protocols libwayland-dev libxkbcommon-dev libxkbcommon-x11-dev libxkbregistry-dev
  libdrm-dev libgbm-dev libegl-dev libgl1-mesa-dev libgles2-mesa-dev
  libpixman-1-dev libseat-dev libudev-dev libdisplay-info-dev
  libgraphene-1.0-dev libgirepository1.0-dev gobject-introspection
  libpugixml-dev libsdbus-c++-dev libtomlplusplus-dev libre2-dev librsvg2-dev libzip-dev libmagic-dev
  libjpeg-dev libwebp-dev libspng-dev libjxl-dev libswresample-dev libavutil-dev libavcodec-dev libavformat-dev
  libvkfft-dev libvulkan-dev libvulkan-volk-dev glslang-tools spirv-tools
  libxcb-composite0-dev libxcb-cursor-dev libxcb-dri3-dev libxcb-ewmh-dev libxcb-icccm4-dev
  libxcb-xkb-dev libxcb-xinput-dev libxcb-xinerama0-dev libxcb-present-dev libxcb-res0-dev libxcb-render-util0-dev
  libxxhash-dev libpam0g-dev libsystemd-dev
  libgdk-pixbuf-2.0-dev libgdk-pixbuf2.0-bin libcairo2-dev libpango1.0-dev
  qt6-base-dev qt6-wayland qt6-declarative-dev qml6-module-qtcore qml6-module-qtquick-layouts qt6-tools-dev qt6-tools-dev-tools
  libpipewire-0.3-dev libspa-0.2-dev
  xwayland xdg-desktop-portal xdg-desktop-portal-gtk
  libglaze-dev
)

CONFLICT_PKGS=(dunst mako rofi)

# --- stamps / helpers ---
sudo mkdir -p "$STAMPDIR"
stamped(){ [[ -f "$STAMPDIR/$1@$2.stamp" ]]; }
stamp(){ echo "$(date -Iseconds) $1 $2" | sudo tee "$STAMPDIR/$1@$2.stamp" >/dev/null; }

pick_tag(){ # repo desired_tag -> usable_tag
  local repo="$1" want="$2" out
  if git ls-remote --tags "$repo" "refs/tags/$want" | grep -q "$want"; then echo "$want"; return; fi
  say "Tag $want not found in $repo â†’ using latest."
  out="$(git ls-remote --tags "$repo" 'refs/tags/v*' | awk -F/ '{print $3}' | sed 's/\^{}//' | sort -V | tail -n1)"
  [[ -n "$out" ]] || { err "cannot resolve latest tag for $repo"; exit 1; }
  echo "$out"
}

build_cmake(){ # name repo desired_tag [extra_cmake_args...]
  local name="$1" repo="$2" desired="$3"; shift 3
  local tag; tag="$(pick_tag "$repo" "$desired")"
  if stamped "$name" "$tag"; then ok "$name $tag already installed"; return; fi
  say "Building $name $tag"
  local dir="$WORKDIR/$name"; rm -rf "$dir"; git clone --recursive -b "$tag" "$repo" "$dir"
  pushd "$dir" >/dev/null
  cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr "$@"
  cmake --build build -j"$(nproc_safe)"
  sudo cmake --install build
  popd >/dev/null
  stamp "$name" "$tag"; ok "$name $tag installed"
}

build_meson(){ # name repo desired_tag [meson args...]
  local name="$1" repo="$2" desired="$3"; shift 3
  local tag; tag="$(pick_tag "$repo" "$desired")"
  if stamped "$name" "$tag"; then ok "$name $tag already installed"; return; fi
  say "Building $name $tag"
  local dir="$WORKDIR/$name"; rm -rf "$dir"; git clone --recursive -b "$tag" "$repo" "$dir"
  pushd "$dir" >/dev/null
  meson setup build "$@"
  ninja -C build
  sudo ninja -C build install
  popd >/dev/null
  stamp "$name" "$tag"; ok "$name $tag installed"
}

# --- main ---
main(){
  mkdir -p "$WORKDIR"
  say "apt update && install deps"
  sudo apt update -y
  sudo apt install -y "${APT_PKGS[@]}"

  if [[ "$REMOVE_CONFLICTS" == "1" ]]; then
    for p in "${CONFLICT_PKGS[@]}"; do
      dpkg -l | grep -q "^ii\s\+$p\s" && sudo apt autoremove -y "$p" || true
    done
  fi

  if [[ "$INSTALL_SEATD" == "1" ]]; then
    sudo apt install -y seatd || true
    sudo systemctl enable --now seatd 2>/dev/null || true
    getent group input >/dev/null && sudo usermod -aG input "$USER" || true
    getent group seatd >/dev/null && sudo usermod -aG seatd "$USER" || true
    getent group seat  >/dev/null && sudo usermod -aG seat  "$USER" || true
  fi

  # order matters
  build_cmake "hyprutils"            "https://github.com/hyprwm/hyprutils.git"            "$HYPRUTILS_TAG"
  build_cmake "hyprlang"             "https://github.com/hyprwm/hyprlang.git"             "$HYPRLANG_TAG"
  build_cmake "hyprgraphics"         "https://github.com/hyprwm/hyprgraphics.git"         "$HYPRGRAPHICS_TAG"
  build_cmake "hyprcursor"           "https://github.com/hyprwm/hyprcursor.git"           "$HYPRCURSOR_TAG"
  build_cmake "hyprwayland-scanner"  "https://github.com/hyprwm/hyprwayland-scanner.git"  "$HYPRSCAN_TAG" -DCMAKE_INSTALL_PREFIX=/usr
  build_meson "hyprland-protocols"   "https://github.com/hyprwm/hyprland-protocols.git"   "$HYPRPROTO_TAG"

  build_cmake "aquamarine"           "https://github.com/hyprwm/aquamarine.git"           "$AQUA_TAG"
  build_cmake "hypridle"             "https://github.com/hyprwm/hypridle.git"             "$HYPRIDLE_TAG"
  build_cmake "hyprpolkitagent"      "https://github.com/hyprwm/hyprpolkitagent.git"      "$HYPRAUTH_TAG"
  build_cmake "hyprland-qtutils"     "https://github.com/hyprwm/hyprland-qtutils.git"     "$HYPRQTUTILS_TAG"
  build_cmake "hyprland-qt-support"  "https://github.com/hyprwm/hyprland-qt-support.git"  "$HYPRQT_SUPPORT_TAG"

  # Hyprland (project's Makefile wraps CMake)
  {
    tag="$(pick_tag https://github.com/hyprwm/Hyprland.git "$HYPR_TAG")"
    if stamped "hyprland" "$tag"; then ok "Hyprland $tag already installed";
    else
      say "Building Hyprland $tag"
      dir="$WORKDIR/Hyprland"; rm -rf "$dir"; git clone --recursive -b "$tag" https://github.com/hyprwm/Hyprland.git "$dir"
      pushd "$dir" >/dev/null
      make -j"$(nproc_safe)" all
      sudo make install
      popd >/dev/null
      stamp "hyprland" "$tag"; ok "Hyprland $tag installed"
    fi
  }

  build_cmake "xdg-desktop-portal-hyprland" "https://github.com/hyprwm/xdg-desktop-portal-hyprland.git" "$XDPH_TAG" \
    -DCMAKE_INSTALL_LIBEXECDIR=/usr/lib -DCMAKE_INSTALL_PREFIX=/usr

  if [[ "$ENABLE_SDDM" == "1" ]]; then
    sudo apt install -y --no-install-recommends sddm
    sudo systemctl set-default graphical.target
    sudo systemctl enable sddm.service
  fi

  ok "Done. Log out/in (or reboot) to pick up seatd group changes."
  ok "Sanity: which hyprland; hyprland -v; systemctl status seatd"
}

main "$@"

