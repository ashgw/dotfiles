#!/bin/bash
# Hyprland installer for Debian Trixie or Sid (minimal + optional Waybar)
# - colored step logging
# - idempotent package/build logic
# - prefers xdg-desktop-portal-hyprland, falls back to -wlr on Trixie
# - ensures aquamarine + hyprwayland-scanner when not in repos

set -Eeuo pipefail

# ---------- colored logging ----------
color(){ tput setaf "$1"; }
reset(){ tput sgr0; }
ok(){   printf "%s[%s]%s %s\n" "$(color 2)" "OK"    "$(reset)" "$*"; }
info(){ printf "%s[%s]%s %s\n" "$(color 4)" "INFO"  "$(reset)" "$*"; }
note(){ printf "%s[%s]%s %s\n" "$(color 3)" "NOTE"  "$(reset)" "$*"; }
err(){  printf "%s[%s]%s %s\n" "$(color 1)" "ERR"   "$(reset)" "$*" >&2; }

step(){  printf "\n%s==> %s%s\n" "$(color 6)" "$*" "$(reset)"; }
doing(){ printf "%s   ->%s %s\n"  "$(color 6)" "$(reset)" "$*"; }

# ---------- guards ----------
if [[ $EUID -eq 0 ]]; then err "Do not run as root. The script will sudo when needed."; exit 1; fi
if ! grep -q 'ID=debian' /etc/os-release; then err "Debian only."; exit 1; fi

. /etc/os-release
if [[ "$VERSION_CODENAME" != "trixie" && "$VERSION_CODENAME" != "sid" && "$VERSION_CODENAME" != "unstable" ]]; then
  note "Target is Debian Trixie or Sid. Detected: $PRETTY_NAME"
  read -p "Continue anyway? [y/N] " -n 1 -r; echo
  [[ $REPLY =~ ^[Yy]$ ]] || exit 1
fi

# ---------- logging to file ----------
mkdir -p Install-Logs
LOG="Install-Logs/hyprland-install-$(date +%Y%m%d-%H%M%S).log"
echo "== $(date -Iseconds) start ==" | tee -a "$LOG"
trap 'err "Failed on line $LINENO. See $LOG"' ERR

export DEBIAN_FRONTEND=noninteractive
export APT_LISTCHANGES_FRONTEND=none

# ---------- apt helpers ----------
pkg_installed(){ dpkg-query -W -f='${Status}\n' "$1" 2>/dev/null | grep -q "install ok installed"; }
pkg_available(){
  local out; out="$(apt-cache policy "$1" 2>/dev/null || true)"
  [[ -n "$out" ]] && grep -q "Candidate:" <<<"$out" && ! grep -q "(none)" <<<"$out"
}
need_pkgs(){ local p; for p in "$@"; do pkg_installed "$p" || echo "$p"; done; }

wait_for_apt_lock(){
  local tries=120
  while fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 \
     || fuser /var/lib/apt/lists/lock >/dev/null 2>&1 \
     || fuser /var/cache/apt/archives/lock >/dev/null 2>&1; do
    info "Waiting for apt locks..." | tee -a "$LOG"
    sleep 1
    ((tries--)) || { err "Timeout waiting for apt locks" | tee -a "$LOG"; return 1; }
  done
}

apt_safe(){ wait_for_apt_lock; sudo -E "$@" 2>&1 | tee -a "$LOG"; }

apt_install_missing(){
  local miss=()
  while read -r p; do [[ -n "$p" ]] && miss+=("$p"); done < <(need_pkgs "$@")
  if ((${#miss[@]})); then
    doing "Installing: ${miss[*]}"
    apt_safe apt-get update
    sudo dpkg --configure -a 2>&1 | tee -a "$LOG" || true
    apt_safe apt-get -o Dpkg::Options::=--force-confnew -y install "${miss[@]}"
    ok "Packages installed"
  else
    ok "All requested packages already present"
  fi
}

apt_install_optional(){
  local avail=()
  local p
  for p in "$@"; do
    if pkg_available "$p"; then
      pkg_installed "$p" || avail+=("$p")
    else
      note "Optional package not in repo: $p"
    fi
  done
  ((${#avail[@]})) && apt_install_missing "${avail[@]}" || true
}

# Try first, fall back to second if not available
apt_install_one_of(){
  local primary="$1" fallback="$2"
  if pkg_available "$primary"; then
    apt_install_missing "$primary"
  else
    note "$primary not available in this suite. Using $fallback instead."
    apt_install_missing "$fallback"
  fi
}

# ---------- pause unattended-upgrades during install ----------
if systemctl is-enabled --quiet unattended-upgrades 2>/dev/null; then
  note "Pausing unattended-upgrades"
  sudo systemctl stop unattended-upgrades 2>/dev/null || true
fi

# ---------- packages ----------
BUILD_DEPS=(
  build-essential cmake cmake-extras curl git pkg-config
  libcairo2-dev libdisplay-info-dev libdrm-dev libegl-dev libegl1-mesa-dev
  libgbm-dev libgles2-mesa-dev libglvnd-dev libinput-dev libliftoff-dev
  libpango1.0-dev libpixman-1-dev libseat-dev libsystemd-dev libtomlplusplus-dev
  libvulkan-dev libwayland-dev wayland-protocols
  libxcb-composite0-dev libxcb-cursor-dev libxcb-dri3-dev libxcb-ewmh-dev
  libxcb-icccm4-dev libxcb-present-dev libxcb-render-util0-dev
  libxcb-xfixes0-dev libxcb-xinput-dev libxkbcommon-dev libxkbcommon-x11-dev
  libudis86-dev            # fixes 'Package udis86 not found'
  meson ninja-build xwayland
)
OPTIONAL_BUILD_DEPS=( hyprland-protocols )

# Minimal runtime only
RUNTIME_DEPS=(
  pipewire wireplumber
  wl-clipboard grim slurp
  xdg-desktop-portal xdg-desktop-portal-gtk
  polkit-kde-agent-1
  kitty wofi thunar
)

# ---------- install deps ----------
step "Ensuring build dependencies"
apt_install_missing "${BUILD_DEPS[@]}"
step "Trying optional build dependencies"
apt_install_optional "${OPTIONAL_BUILD_DEPS[@]}"

step "Ensuring minimal runtime"
apt_install_missing "${RUNTIME_DEPS[@]}"

# portal backend: prefer hyprland, clean fallback to wlr on Trixie
step "Portal backend"
doing "Attempting xdg-desktop-portal-hyprland, fallback to xdg-desktop-portal-wlr if unavailable"
apt_install_one_of xdg-desktop-portal-hyprland xdg-desktop-portal-wlr

# optional Waybar
read -p "Install Waybar? [y/N] " -n 1 -r; echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
  step "Installing Waybar"
  apt_install_missing waybar
else
  note "Skipping Waybar"
fi

# ---------- NVIDIA handling ----------
if lspci | grep -qi nvidia; then
  step "NVIDIA detected"
  read -p "Configure NVIDIA Wayland support now? [y/N] " -n 1 -r; echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    apt_install_missing nvidia-driver libnvidia-egl-wayland1
    sudo tee /etc/modprobe.d/nvidia.conf >/dev/null <<'EOF' 2>>"$LOG"
options nvidia-drm modeset=1
options nvidia NVreg_PreserveVideoMemoryAllocations=1
EOF
    ensure_flag(){
      local flag="$1"
      if ! grep -qE "GRUB_CMDLINE_LINUX=.*\b${flag}\b" /etc/default/grub; then
        sudo sed -i "s/^GRUB_CMDLINE_LINUX=\"/GRUB_CMDLINE_LINUX=\"${flag} /" /etc/default/grub
      fi
    }
    ensure_flag "rd.driver.blacklist=nouveau"
    ensure_flag "modprobe.blacklist=nouveau"
    ensure_flag "nvidia-drm.modeset=1"
    apt_safe update-grub || true
    ok "NVIDIA configured"
  else
    note "Skipping NVIDIA configuration"
  fi
fi

# ---------- ensure hyprwayland-scanner ----------
ensure_hwscanner(){
  local min="0.3.10"
  if pkg-config --exists "hyprwayland-scanner >= $min" 2>/dev/null \
     || command -v hyprwayland-scanner >/dev/null 2>&1; then
    ok "hyprwayland-scanner present"
    return 0
  fi
  step "Building hyprwayland-scanner (>= $min)"
  local HWS_TAG="${HWS_TAG:-v0.4.4}"  # sid ships 0.4.4
  rm -rf hyprwayland-scanner 2>/dev/null || true
  doing "Cloning hyprwayland-scanner $HWS_TAG"
  git clone --depth 1 -b "$HWS_TAG" https://github.com/hyprwm/hyprwayland-scanner 2>&1 | tee -a "$LOG"
  pushd hyprwayland-scanner >/dev/null
  doing "Configuring"
  cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr 2>&1 | tee -a "../$LOG"
  doing "Compiling"
  cmake --build build -j"$(nproc 2>/dev/null || getconf _NPROCESSORS_CONF)" 2>&1 | tee -a "../$LOG"
  doing "Installing"
  sudo cmake --install build 2>&1 | tee -a "../$LOG"
  sudo ldconfig
  popd >/dev/null
  if command -v hyprwayland-scanner >/dev/null 2>&1; then
    ok "hyprwayland-scanner installed"
  else
    err "hyprwayland-scanner install failed; see $LOG"; exit 1
  fi
}

# ---------- Aquamarine (required by Hyprland >=0.49) ----------
ensure_aquamarine(){
  local min="0.8.0"
  if pkg-config --exists "aquamarine >= $min"; then
    local ver; ver="$(pkg-config --modversion aquamarine || true)"
    ok "aquamarine $ver present"
    return 0
  fi
  step "Building aquamarine (>= $min)"
  local AQ_TAG="${AQ_TAG:-v0.9.3}"
  rm -rf aquamarine 2>/dev/null || true
  doing "Cloning aquamarine $AQ_TAG"
  git clone --depth 1 -b "$AQ_TAG" https://github.com/hyprwm/aquamarine 2>&1 | tee -a "$LOG"
  pushd aquamarine >/dev/null
  doing "Configuring"
  cmake -S . -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr 2>&1 | tee -a "../$LOG"
  doing "Compiling"
  cmake --build build -j"$(nproc 2>/dev/null || getconf _NPROCESSORS_CONF)" 2>&1 | tee -a "../$LOG"
  doing "Installing"
  sudo cmake --install build 2>&1 | tee -a "../$LOG"
  sudo ldconfig
  popd >/dev/null
  if pkg-config --exists "aquamarine >= $min"; then
    ok "aquamarine installed"
  else
    err "aquamarine install failed; see $LOG"; exit 1
  fi
}

# build-only deps provided from source if apt lacks them
ensure_hwscanner
ensure_aquamarine

# ---------- build Hyprland ----------
HYPRLAND_VERSION="v0.49.0"   # unchanged
current=""
if command -v Hyprland >/dev/null 2>&1; then
  current="$(Hyprland -v 2>/dev/null | sed -nE 's/.*v([0-9]+\.[0-9]+\.[0-9]+).*/v\1/p' || true)"
fi

REBUILD=false
if [[ -z "$current" ]]; then
  REBUILD=true
elif [[ "$current" != "$HYPRLAND_VERSION" ]]; then
  note "Found Hyprland $current, target $HYPRLAND_VERSION"
  read -p "Rebuild to $HYPRLAND_VERSION? [y/N] " -n 1 -r; echo
  [[ $REPLY =~ ^[Yy]$ ]] && REBUILD=true
fi

if $REBUILD; then
  step "Building Hyprland $HYPRLAND_VERSION"
  rm -rf Hyprland 2>/dev/null || true
  doing "Cloning sources"
  git clone --recursive -b "$HYPRLAND_VERSION" https://github.com/hyprwm/Hyprland 2>&1 | tee -a "$LOG"
  pushd Hyprland >/dev/null
  doing "Compiling"
  make all 2>&1 | tee -a "../$LOG"
  doing "Installing"
  sudo make install 2>&1 | tee -a "../$LOG"
  popd >/dev/null
  ok "Hyprland installed"
else
  ok "Hyprland $current already installed - skipping build"
fi

# ---------- session file ----------
HYPR_BIN="$(command -v Hyprland || true)"
if [[ -n "$HYPR_BIN" ]]; then
  if [[ ! -f /usr/share/wayland-sessions/hyprland.desktop ]]; then
    step "Installing session entry"
    sudo tee /usr/share/wayland-sessions/hyprland.desktop >/dev/null <<EOF
[Desktop Entry]
Name=Hyprland
Comment=An independent Wayland compositor
Exec=${HYPR_BIN}
Type=WaylandSession
EOF
    ok "Session entry ready"
  else
    ok "Session entry already exists"
  fi
fi

# ---------- seat/logind ----------
if systemctl is-active --quiet systemd-logind.service; then
  if systemctl is-enabled --quiet seatd.service 2>/dev/null; then
    note "Disabling seatd because logind is active"
    sudo systemctl disable --now seatd.service 2>&1 | tee -a "$LOG" || true
  else
    ok "Using systemd-logind"
  fi
else
  if systemctl list-unit-files | grep -q '^seatd.service'; then
    step "Enabling seatd"
    sudo systemctl enable --now seatd.service 2>&1 | tee -a "$LOG" || true
    for grp in seat input; do
      if getent group "$grp" >/dev/null && ! id -nG "$USER" | grep -qw "$grp"; then
        sudo usermod -aG "$grp" "$USER" 2>&1 | tee -a "$LOG" || true
      fi
    done
  fi
fi

# ---------- config ----------
read -p "Write minimal Hyprland config to ~/.config/hypr/hyprland.conf? [Y/n] " -n 1 -r; echo
if [[ ! $REPLY =~ ^[Nn]$ ]]; then
  step "Writing minimal config"
  mkdir -p ~/.config/hypr
  CONFIG_PATH=~/.config/hypr/hyprland.conf
  [[ -f "$CONFIG_PATH" ]] && cp -a "$CONFIG_PATH" "$CONFIG_PATH.backup.$(date +%Y%m%d%H%M%S)"
  cat > "$CONFIG_PATH" <<'EOF'
monitor=,preferred,auto,auto
env = XCURSOR_SIZE,24

exec-once = sh -lc '[ -x /usr/lib/polkit-kde-authentication-agent-1 ] && /usr/lib/polkit-kde-authentication-agent-1 || true'
exec-once = sh -lc '[ -x /usr/lib/x86_64-linux-gnu/libexec/polkit-kde-authentication-agent-1 ] && /usr/lib/x86_64-linux-gnu/libexec/polkit-kde-authentication-agent-1 || true'

exec-once = kitty
exec-once = wofi --show drun
exec-once = xdg-user-dirs-update

input { kb_layout = us; follow_mouse = 1; touchpad { natural_scroll = false }; sensitivity = 0 }

general { gaps_in = 5; gaps_out = 10; border_size = 2; col.active_border = rgba(33ccffee); col.inactive_border = rgba(595959aa); layout = dwindle }
decoration { rounding = 5; blur { enabled = true; size = 3; passes = 1 }; drop_shadow = true; shadow_range = 4; shadow_render_power = 3 }
animations { enabled = true; bezier = myBezier, 0.05, 0.9, 0.1, 1.05; animation = windows, 1, 7, myBezier; animation = windowsOut, 1, 7, default, popin 80%; animation = border, 1, 10, default; animation = fade, 1, 7, default; animation = workspaces, 1, 6, default }
dwindle { pseudotile = true; preserve_split = true }
master { new_is_master = true }
gestures { workspace_swipe = false }

$mainMod = SUPER
bind = $mainMod, Return, exec, kitty
bind = $mainMod, SPACE, exec, wofi --show drun
bind = $mainMod, Q, killactive
bind = $mainMod, M, exit
bind = $mainMod, E, exec, thunar
bind = $mainMod, V, togglefloating
bind = $mainMod, P, pseudo
bind = $mainMod, J, togglesplit
bind = $mainMod, R, exec, hyprctl reload

bind = $mainMod, left, movefocus, l
bind = $mainMod, right, movefocus, r
bind = $mainMod, up, movefocus, u
bind = $mainMod, down, movefocus, d

bind = $mainMod, 1, workspace, 1
bind = $mainMod, 2, workspace, 2
bind = $mainMod, 3, workspace, 3
bind = $mainMod, 4, workspace, 4
bind = $mainMod, 5, workspace, 5
bind = $mainMod, 6, workspace, 6
bind = $mainMod, 7, workspace, 7
bind = $mainMod, 8, workspace, 8
bind = $mainMod, 9, workspace, 9
bind = $mainMod, 0, workspace, 10

bind = $mainMod SHIFT, 1, movetoworkspace, 1
bind = $mainMod SHIFT, 2, movetoworkspace, 2
bind = $mainMod SHIFT, 3, movetoworkspace, 3
bind = $mainMod SHIFT, 4, movetoworkspace, 4
bind = $mainMod SHIFT, 5, movetoworkspace, 5
bind = $mainMod SHIFT, 6, movetoworkspace, 6
bind = $mainMod SHIFT, 7, movetoworkspace, 7
bind = $mainMod SHIFT, 8, movetoworkspace, 8
bind = $mainMod SHIFT, 9, movetoworkspace, 9
bind = $mainMod SHIFT, 0, movetoworkspace, 10

bind = $mainMod, mouse_down, workspace, e+1
bind = $mainMod, mouse_up, workspace, e-1
bindm = $mainMod, mouse:272, movewindow
bindm = $mainMod, mouse:273, resizewindow
EOF
  ok "Wrote ~/.config/hypr/hyprland.conf"
fi

# ---------- resume unattended-upgrades ----------
if systemctl is-enabled --quiet unattended-upgrades 2>/dev/null; then
  sudo systemctl start unattended-upgrades 2>/dev/null || true
fi

ok "Done. Full log at $LOG"
echo "Choose Hyprland in your greeter, or from a TTY run: Hyprland"

read -p "Reboot now? [y/N] " -n 1 -r; echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
  info "Rebooting..."
  sudo reboot
fi

