#!/bin/bash
# Hyprland minimal installer for Debian Trixie/Sid
# - Minimal only; optional Waybar
# - Logs to Install-Logs/* (no tput/tee)
# - Build order: hyprwayland-scanner -> hyprutils (>=0.8) -> aquamarine (generate->patch->build) -> Hyprland
# - No config-file writing

set -Eeuo pipefail

# ----- logging (simple & robust) -----
mkdir -p Install-Logs
LOG="Install-Logs/hyprland-install-$(date +%Y%m%d-%H%M%S).log"
log(){ local m="[$(date +%H:%M:%S)] $*"; echo "$m"; echo "$m" >> "$LOG"; }
trap 'log "[ERR] failed on line $LINENO. See $LOG"' ERR
echo "== $(date -Iseconds) start ==" >> "$LOG"

# ----- guards -----
if [[ $EUID -eq 0 ]]; then log "[ERR] do not run as root"; exit 1; fi
if ! grep -q 'ID=debian' /etc/os-release; then log "[ERR] Debian only"; exit 1; fi
. /etc/os-release
if [[ "${VERSION_CODENAME:-}" != "trixie" && "${VERSION_CODENAME:-}" != "sid" && "${VERSION_CODENAME:-}" != "unstable" ]]; then
  log "[NOTE] target is Debian Trixie/Sid. Detected: $PRETTY_NAME"
  read -rp "Continue anyway? [y/N] " r; echo; [[ $r =~ ^[Yy]$ ]] || exit 1
fi

export DEBIAN_FRONTEND=noninteractive
export APT_LISTCHANGES_FRONTEND=none

# ----- helpers -----
pkg_installed(){ dpkg-query -W -f='${Status}\n' "$1" 2>/dev/null | grep -q "install ok installed"; }
pkg_available(){ apt-cache policy "$1" 2>/dev/null | grep -q "Candidate:" && ! apt-cache policy "$1" | grep -q "(none)"; }
need_pkgs(){ local p; for p in "$@"; do pkg_installed "$p" || echo "$p"; done; }
wait_for_apt_lock(){
  local tries=120
  while fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 \
     || fuser /var/lib/apt/lists/lock >/dev/null 2>&1 \
     || fuser /var/cache/apt/archives/lock >/dev/null 2>&1; do
    log "[INFO] waiting for apt locks..."; sleep 1
    ((tries--)) || { log "[ERR] apt lock timeout"; return 1; }
  done
}
apt_safe(){ wait_for_apt_lock; sudo -E "$@" 2>&1 | tee -a "$LOG"; }
apt_install_missing(){
  local missing=(); while read -r p; do [[ -n $p ]] && missing+=("$p"); done < <(need_pkgs "$@")
  if ((${#missing[@]})); then
    log "[INFO] installing: ${missing[*]}"
    apt_safe apt-get update
    sudo dpkg --configure -a 2>&1 | tee -a "$LOG" || true
    apt_safe apt-get -o Dpkg::Options::=--force-confnew -y install "${missing[@]}"
    log "[OK] packages installed"
  else
    log "[OK] packages already present"
  fi
}
ver_ge(){ dpkg --compare-versions "$1" ge "$2"; }

# ----- pause unattended-upgrades to reduce apt lock noise -----
if systemctl is-enabled --quiet unattended-upgrades 2>/dev/null; then
  log "[NOTE] pausing unattended-upgrades"; sudo systemctl stop unattended-upgrades 2>/dev/null || true
fi

# ----- deps -----
BUILD_DEPS=(
  build-essential cmake ninja-build meson curl git pkg-config
  libcairo2-dev libdisplay-info-dev libdrm-dev libegl-dev libegl1-mesa-dev
  libgbm-dev libgles2-mesa-dev libglvnd-dev libinput-dev libliftoff-dev
  libpango1.0-dev libpixman-1-dev libseat-dev libsystemd-dev libtomlplusplus-dev
  libvulkan-dev libwayland-dev wayland-protocols
  libxcb-composite0-dev libxcb-cursor-dev libxcb-dri3-dev libxcb-ewmh-dev
  libxcb-icccm4-dev libxcb-present-dev libxcb-render-util0-dev
  libxcb-xfixes0-dev libxcb-xinput-dev libxkbcommon-dev libxkbcommon-x11-dev
  libpugixml-dev libudis86-dev xwayland
)
RUNTIME_DEPS=( pipewire wireplumber wl-clipboard grim slurp xdg-desktop-portal xdg-desktop-portal-gtk polkit-kde-agent-1 kitty wofi thunar hwdata )

log "[INFO] ensuring build deps...";   apt_install_missing "${BUILD_DEPS[@]}"
log "[INFO] ensuring runtime deps..."; apt_install_missing "${RUNTIME_DEPS[@]}"

# Portal: prefer hyprland, else wlr (Debian sid has it; trixie may not)
if pkg_available xdg-desktop-portal-hyprland; then
  log "[INFO] installing xdg-desktop-portal-hyprland"; apt_install_missing xdg-desktop-portal-hyprland
else
  log "[NOTE] xdg-desktop-portal-hyprland not available; falling back to xdg-desktop-portal-wlr"
  apt_install_missing xdg-desktop-portal-wlr
fi

# Waybar prompt
read -rp "Install Waybar? [y/N] " r; echo
[[ $r =~ ^[Yy]$ ]] && { log "[INFO] installing waybar"; apt_install_missing waybar; } || log "[NOTE] skipping waybar"

# ----- build: hyprwayland-scanner -----
ensure_hwscanner(){
  local need="0.3.10" cur=""
  if pkg-config --exists hyprwayland-scanner 2>/dev/null; then cur="$(pkg-config --modversion hyprwayland-scanner || true)"; fi
  if [[ -n "$cur" ]] && ver_ge "$cur" "$need"; then log "[OK] hyprwayland-scanner $cur present"; return 0; fi
  log "[INFO] building hyprwayland-scanner v0.4.5"
  rm -rf hyprwayland-scanner
  git clone --depth=1 -b v0.4.5 https://github.com/hyprwm/hyprwayland-scanner 2>&1 | tee -a "$LOG"
  cmake -S hyprwayland-scanner -B hyprwayland-scanner/build -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr 2>&1 | tee -a "$LOG"
  cmake --build hyprwayland-scanner/build -j"$(nproc 2>/dev/null || getconf _NPROCESSORS_CONF)" 2>&1 | tee -a "$LOG"
  sudo cmake --install hyprwayland-scanner/build 2>&1 | tee -a "$LOG"
  sudo ldconfig
  log "[OK] hyprwayland-scanner installed"
}
ensure_hwscanner

# ----- build: hyprutils (>=0.8.0) -----
ensure_hyprutils(){
  local need="0.8.0" cur=""
  if pkg-config --exists hyprutils 2>/dev/null; then cur="$(pkg-config --modversion hyprutils || true)"; fi
  if [[ -n "$cur" ]] && ver_ge "$cur" "$need"; then log "[OK] hyprutils $cur present"; return 0; fi
  log "[INFO] building hyprutils v0.8.3"
  rm -rf hyprutils
  git clone --depth=1 -b v0.8.3 https://github.com/hyprwm/hyprutils 2>&1 | tee -a "$LOG"
  cmake -S hyprutils -B hyprutils/build -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr 2>&1 | tee -a "$LOG"
  cmake --build hyprutils/build -j"$(nproc 2>/dev/null || getconf _NPROCESSORS_CONF)" 2>&1 | tee -a "$LOG"
  sudo cmake --install hyprutils/build 2>&1 | tee -a "$LOG"
  sudo ldconfig
  log "[OK] hyprutils installed"
}
ensure_hyprutils

# ----- build: aquamarine (force-generate -> patch -> build) -----
build_aquamarine(){
  rm -rf aquamarine
  git clone --depth=1 -b v0.9.3 https://github.com/hyprwm/aquamarine 2>&1 | tee -a "$LOG"
  CFLAGS="${CFLAGS:-} -O2" CXXFLAGS="${CXXFLAGS:-} -O2" \
    cmake -S aquamarine -B aquamarine/build -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr 2>&1 | tee -a "$LOG"

  # Pass 1 (single thread) just to generate protocol sources; ignore failure
  log "[INFO] aquamarine: generating protocol sources (first pass)"
  set +e
  cmake --build aquamarine/build -j1 2>&1 | tee -a "$LOG"
  set -e

  # Patch zero-length VTables even if split across lines: VTable[] = {} -> VTable[1] = { nullptr }
  log "[INFO] aquamarine: patching generated VTables"
  for dir in aquamarine/protocols aquamarine/build/protocols; do
    if compgen -G "$dir/*.cpp" >/dev/null; then
      for f in $dir/*.cpp; do
        perl -0777 -pe 's/(VTable)\[\]\s*=\s*\{\s*\}/\1[1] = { nullptr }/gs' -i "$f"
      done
    fi
  done

  # Full build & install
  log "[INFO] aquamarine: building (second pass)"
  cmake --build aquamarine/build -j"$(nproc 2>/dev/null || getconf _NPROCESSORS_CONF)" 2>&1 | tee -a "$LOG"
  sudo cmake --install aquamarine/build 2>&1 | tee -a "$LOG"
  sudo ldconfig
  log "[OK] aquamarine installed"
}
build_aquamarine

# ----- build: Hyprland -----
HL_TAG="v0.49.0"
current=""
if command -v Hyprland >/dev/null 2>&1; then current="$(Hyprland -v 2>/dev/null | sed -nE 's/.*v([0-9]+\.[0-9]+\.[0-9]+).*/v\1/p' || true)"; fi
rebuild=false
[[ -z "$current" || "$current" != "$HL_TAG" ]] && rebuild=true
if $rebuild; then
  log "[INFO] building Hyprland $HL_TAG"
  rm -rf Hyprland
  git clone --recursive -b "$HL_TAG" https://github.com/hyprwm/Hyprland 2>&1 | tee -a "$LOG"
  ( cd Hyprland && make all 2>&1 | tee -a "../$LOG" && sudo make install 2>&1 | tee -a "../$LOG" )
  log "[OK] Hyprland installed"
else
  log "[OK] Hyprland $current already installed - skipping build"
fi

# ----- session .desktop -----
HYPR_BIN="$(command -v Hyprland || true)"
if [[ -n "$HYPR_BIN" && ! -f /usr/share/wayland-sessions/hyprland.desktop ]]; then
  log "[INFO] installing session file"
  sudo tee /usr/share/wayland-sessions/hyprland.desktop >/dev/null <<EOF
[Desktop Entry]
Name=Hyprland
Comment=An independent Wayland compositor
Exec=${HYPR_BIN}
Type=WaylandSession
EOF
  log "[OK] session entry ready"
fi

# ----- seat/logind -----
if systemctl is-active --quiet systemd-logind.service; then
  systemctl is-enabled --quiet seatd.service 2>/dev/null && { log "[NOTE] disabling seatd (logind active)"; sudo systemctl disable --now seatd.service 2>&1 | tee -a "$LOG" || true; }
  log "[OK] using systemd-logind"
else
  if systemctl list-unit-files | grep -q '^seatd.service'; then
    log "[INFO] enabling seatd"
    sudo systemctl enable --now seatd.service 2>&1 | tee -a "$LOG" || true
    for grp in seat input; do
      if getent group "$grp" >/dev/null && ! id -nG "$USER" | grep -qw "$grp"; then sudo usermod -aG "$grp" "$USER" 2>&1 | tee -a "$LOG" || true; fi
    done
  fi
fi

# ----- resume unattended-upgrades -----
systemctl is-enabled --quiet unattended-upgrades 2>/dev/null && sudo systemctl start unattended-upgrades 2>/dev/null || true

log "[OK] done. log at $LOG"
echo "From a TTY: Hyprland   (or pick it in your greeter)"

