#!/bin/bash
set -Eeuo pipefail

# ---------- colored logging ----------
color(){ tput setaf "$1"; }
reset(){ tput sgr0; }
ok(){   printf "%s[%s]%s %s\n" "$(color 2)" "OK"    "$(reset)" "$*"; }
info(){ printf "%s[%s]%s %s\n" "$(color 4)" "INFO"  "$(reset)" "$*"; }
note(){ printf "%s[%s]%s %s\n" "$(color 3)" "NOTE"  "$(reset)" "$*"; }
err(){  printf "%s[%s]%s %s\n" "$(color 1)" "ERR"   "$(reset)" "$*" >&2; }

step(){  printf "\n%s==> %s%s\n" "$(color 6)" "$*" "$(reset)"; }
doing(){ printf "%s   ->%s %s\n"  "$(color 6)" "$(reset)" "$*"; }

# ---------- guards ----------
if [[ $EUID -eq 0 ]]; then err "Do not run as root. The script will sudo when needed."; exit 1; fi
if ! grep -q 'ID=debian' /etc/os-release; then err "Debian only."; exit 1; fi

. /etc/os-release
if [[ "$VERSION_CODENAME" != "trixie" && "$VERSION_CODENAME" != "sid" && "$VERSION_CODENAME" != "unstable" ]]; then
  note "Target is Debian Trixie or Sid. Detected: $PRETTY_NAME"
  read -p "Continue anyway? [y/N] " -n 1 -r; echo
  [[ $REPLY =~ ^[Yy]$ ]] || exit 1
fi

# ---------- logging to file ----------
mkdir -p Install-Logs
LOG="Install-Logs/hyprland-install-$(date +%Y%m%d-%H%M%S).log"
echo "== $(date -Iseconds) start ==" | tee -a "$LOG"
trap 'err "Failed on line $LINENO. See $LOG"' ERR

export DEBIAN_FRONTEND=noninteractive
export APT_LISTCHANGES_FRONTEND=none

# ---------- apt helpers ----------
pkg_installed(){ dpkg-query -W -f='${Status}\n' "$1" 2>/dev/null | grep -q "install ok installed"; }
pkg_available(){
  local p="$1"
  local out
  out="$(apt-cache policy "$p" 2>/dev/null || true)"
  [[ -n "$out" ]] && echo "$out" | grep -q "Candidate:" && ! echo "$out" | grep -q "(none)"
}
need_pkgs(){ local p; for p in "$@"; do pkg_installed "$p" || echo "$p"; done; }

wait_for_apt_lock(){
  local tries=120
  while fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1 \
     || fuser /var/lib/apt/lists/lock >/dev/null 2>&1 \
     || fuser /var/cache/apt/archives/lock >/dev/null 2>&1; do
    info "Waiting for apt locks..." | tee -a "$LOG"
    sleep 1
    ((tries--)) || { err "Timeout waiting for apt locks" | tee -a "$LOG"; return 1; }
  done
}

apt_safe(){ wait_for_apt_lock; sudo -E "$@" 2>&1 | tee -a "$LOG"; }

apt_install_missing(){
  local miss=()
  while read -r p; do [[ -n "$p" ]] && miss+=("$p"); done < <(need_pkgs "$@")
  if ((${#miss[@]})); then
    doing "Installing: ${miss[*]}"
    apt_safe apt-get update
    sudo dpkg --configure -a 2>&1 | tee -a "$LOG" || true
    apt_safe apt-get -o Dpkg::Options::=--force-confnew -y install "${miss[@]}"
    ok "Packages installed"
  else
    ok "All requested packages already present"
  fi
}

apt_install_optional(){
  local avail=()
  local p
  for p in "$@"; do
    if pkg_available "$p"; then
      pkg_installed "$p" || avail+=("$p")
    else
      note "Optional package not in repo: $p"
    fi
  done
  ((${#avail[@]})) && apt_install_missing "${avail[@]}" || true
}

# Try first, fall back to second if not available
apt_install_one_of(){
  local primary="$1" fallback="$2"
  if pkg_available "$primary"; then
    apt_install_missing "$primary"
  else
    note "$primary not available in this suite. Using $fallback instead."
    apt_install_missing "$fallback"
  fi
}

# ---------- pause unattended-upgrades during install ----------
if systemctl is-enabled --quiet unattended-upgrades 2>/dev/null; then
  note "Pausing unattended-upgrades"
  sudo systemctl stop unattended-upgrades 2>/dev/null || true
fi

# ---------- packages ----------
BUILD_DEPS=(
  build-essential cmake cmake-extras curl git pkg-config
  libcairo2-dev libdisplay-info-dev libdrm-dev libegl-dev libegl1-mesa-dev
  libgbm-dev libgles2-mesa-dev libglvnd-dev libinput-dev libliftoff-dev
  libpango1.0-dev libpixman-1-dev libseat-dev libsystemd-dev libtomlplusplus-dev
  libvulkan-dev libwayland-dev wayland-protocols
  libxcb-composite0-dev libxcb-cursor-dev libxcb-dri3-dev libxcb-ewmh-dev
  libxcb-icccm4-dev libxcb-present-dev libxcb-render-util0-dev
  libxcb-xfixes0-dev libxcb-xinput-dev libxkbcommon-dev libxkbcommon-x11-dev
  meson ninja-build xwayland
)
OPTIONAL_BUILD_DEPS=( hyprland-protocols )

# Minimal runtime only
RUNTIME_DEPS=(
  pipewire wireplumber
  wl-clipboard grim slurp
  xdg-desktop-portal xdg-desktop-portal-gtk
  polkit-kde-agent-1
  kitty wofi thunar
)

# ---------- install deps ----------
step "Ensuring build dependencies"
apt_install_missing "${BUILD_DEPS[@]}"
step "Trying optional build dependencies"
apt_install_optional "${OPTIONAL_BUILD_DEPS[@]}"

step "Ensuring minimal runtime"
apt_install_missing "${RUNTIME_DEPS[@]}"

# portal backend: prefer hyprland, clean fallback to wlr on Trixie
step "Portal backend"
doing "Attempting xdg-desktop-portal-hyprland, fallback to xdg-desktop-portal-wlr if unavailable"
apt_install_one_of xdg-desktop-portal-hyprland xdg-desktop-portal-wlr

# optional Waybar
read -p "Install Waybar? [y/N] " -n 1 -r; echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
  step "Installing Waybar"
  apt_install_missing waybar
else
  note "Skipping Waybar"
fi

# ---------- NVIDIA handling ----------
if lspci | grep -qi nvidia; then
  step "NVIDIA detected"
  read -p "Configure NVIDIA Wayland support now? [y/N] " -n 1 -r; echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    apt_install_missing nvidia-driver libnvidia-egl-wayland1
    sudo tee /etc/modprobe.d/nvidia.conf >/dev/null <<'EOF' 2>>"$LOG"
options nvidia-drm modeset=1
options nvidia NVreg_PreserveVideoMemoryAllocations=1
EOF
    ensure_flag(){
      local flag="$1"
      if ! grep -qE "GRUB_CMDLINE_LINUX=.*\b${flag}\b" /etc/default/grub; then
        sudo sed -i "s/^GRUB_CMDLINE_LINUX=\"/GRUB_CMDLINE_LINUX=\"${flag} /" /etc/default/grub
      fi
    }
    ensure_flag "rd.driver.blacklist=nouveau"
    ensure_flag "modprobe.blacklist=nouveau"
    ensure_flag "nvidia-drm.modeset=1"
    apt_safe update-grub || true
    ok "NVIDIA configured"
  else
    note "Skipping NVIDIA configuration"
  fi
fi

# ---------- build Hyprland ----------
HYPRLAND_VERSION="v0.49.0"   # keep as-is to avoid surprises
current=""
if command -v Hyprland >/dev/null 2>&1; then
  current="$(Hyprland -v 2>/dev/null | sed -nE 's/.*v([0-9]+\.[0-9]+\.[0-9]+).*/v\1/p' || true)"
fi

REBUILD=false
if [[ -z "$current" ]]; then
  REBUILD=true
elif [[ "$current" != "$HYPRLAND_VERSION" ]]; then
  note "Found Hyprland $current, target $HYPRLAND_VERSION"
  read -p "Rebuild to $HYPRLAND_VERSION? [y/N] " -n 1 -r; echo
  [[ $REPLY =~ ^[Yy]$ ]] && REBUILD=true
fi

if $REBUILD; then
  step "Building Hyprland $HYPRLAND_VERSION"
  rm -rf Hyprland 2>/dev/null || true
  doing "Cloning sources"
  git clone --recursive -b "$HYPRLAND_VERSION" https://github.com/hyprwm/Hyprland 2>&1 | tee -a "$LOG"
  pushd Hyprland >/dev/null
  doing "Compiling"
  make all 2>&1 | tee -a "../$LOG"
  doing "Installing"
  sudo make install 2>&1 | tee -a "../$LOG"
  popd >/dev/null
  ok "Hyprland installed"
else
  ok "Hyprland $current already installed - skipping build"
fi

# ---------- session file ----------
HYPR_BIN="$(command -v Hyprland || true)"
if [[ -n "$HYPR_BIN" ]]; then
  if [[ ! -f /usr/share/wayland-sessions/hyprland.desktop ]]; then
    step "Installing session entry"
    sudo tee /usr/share/wayland-sessions/hyprland.desktop >/dev/null <<EOF
[Desktop Entry]
Name=Hyprland
Comment=An independent Wayland compositor
Exec=${HYPR_BIN}
Type=WaylandSession
EOF
    ok "Session entry ready"
  else
    ok "Session entry already exists"
  fi
fi

# ---------- seat/logind ----------
if systemctl is-active --quiet systemd-logind.service; then
  if systemctl is-enabled --quiet seatd.service 2>/dev/null; then
    note "Disabling seatd because logind is active"
    sudo systemctl disable --now seatd.service 2>&1 | tee -a "$LOG" || true
  else
    ok "Using systemd-logind"
  fi
else
  if systemctl list-unit-files | grep -q '^seatd.service'; then
    step "Enabling seatd"
    sudo systemctl enable --now seatd.service 2>&1 | tee -a "$LOG" || true
    for grp in seat input; do
      if getent group "$grp" >/dev/null && ! id -nG "$USER" | grep -qw "$grp"; then
        sudo usermod -aG "$grp" "$USER" 2>&1 | tee -a "$LOG" || true
      fi
    done
  fi
fi

# ---------- resume unattended-upgrades ----------
if systemctl is-enabled --quiet unattended-upgrades 2>/dev/null; then
  sudo systemctl start unattended-upgrades 2>/dev/null || true
fi

ok "Done. Full log at $LOG"
echo "Choose Hyprland in your greeter, or from a TTY run: Hyprland"

read -p "Reboot now? [y/N] " -n 1 -r; echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
  info "Rebooting..."
  sudo reboot
fi

